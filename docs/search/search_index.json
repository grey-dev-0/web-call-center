{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web Call Center for Laravel Overview This project aims to provide a web call center service where organizations and institutes that provide customer service and support can use, it's a WebRTC based project using Agora IO service to enable customers around the world contact your organization's customer support agents through web, it also supports receiving calls from Android and iOS applications that have Agora Mobile SDK integrated. This project can be used on its own within a bare Laravel application , or it can be integrated within existing Laravel applications , please refer to the \"Getting Started\" page that corresponds with your use case. IMPORTANT NOTICE: This project is still in early stages of development thus, it only provides basic features as of now, the list of available features is listed in the next section. Features Agents dashboard for customer support personnel to receive incoming calls. Customers prototype dashboard that enables them to make calls to one of the enlisted organizations. An organization can be any establishment that provides some kind of service or products to public e.g. hospitals, restaurants, agencies, or any other sort of business. Automatic management of incoming calls to a particular organization. On heavily incoming calls, the project will distribute them simply on all available agents i.e. an incoming call will always be assigned to the least occupied agent who's currently online within the organization requested by the calling customer. The dashboards included are customizable within any Laravel application whether used alone as a sole project, or integrated to an existing project. Integration to existing Laravel project can use existing models - database tables - that represent the required entities for the project to function. You'll need to have models that represent organizations, customer support agents and finally, customers. Or you can use the included models and database tables which are already defined within the project. Attribution The idea of this project wouldn't have come to live without the following amazing technologies and the great people behind their development: The Laravel Framework WebRTC by Google Agora IO Bootstrap Vue And the marvelous software that generated this documentation. MkDocs MkDocs Material","title":"Web Call Center for Laravel"},{"location":"#web-call-center-for-laravel","text":"","title":"Web Call Center for Laravel"},{"location":"#overview","text":"This project aims to provide a web call center service where organizations and institutes that provide customer service and support can use, it's a WebRTC based project using Agora IO service to enable customers around the world contact your organization's customer support agents through web, it also supports receiving calls from Android and iOS applications that have Agora Mobile SDK integrated. This project can be used on its own within a bare Laravel application , or it can be integrated within existing Laravel applications , please refer to the \"Getting Started\" page that corresponds with your use case. IMPORTANT NOTICE: This project is still in early stages of development thus, it only provides basic features as of now, the list of available features is listed in the next section.","title":"Overview"},{"location":"#features","text":"Agents dashboard for customer support personnel to receive incoming calls. Customers prototype dashboard that enables them to make calls to one of the enlisted organizations. An organization can be any establishment that provides some kind of service or products to public e.g. hospitals, restaurants, agencies, or any other sort of business. Automatic management of incoming calls to a particular organization. On heavily incoming calls, the project will distribute them simply on all available agents i.e. an incoming call will always be assigned to the least occupied agent who's currently online within the organization requested by the calling customer. The dashboards included are customizable within any Laravel application whether used alone as a sole project, or integrated to an existing project. Integration to existing Laravel project can use existing models - database tables - that represent the required entities for the project to function. You'll need to have models that represent organizations, customer support agents and finally, customers. Or you can use the included models and database tables which are already defined within the project.","title":"Features"},{"location":"#attribution","text":"The idea of this project wouldn't have come to live without the following amazing technologies and the great people behind their development: The Laravel Framework WebRTC by Google Agora IO Bootstrap Vue And the marvelous software that generated this documentation. MkDocs MkDocs Material","title":"Attribution"},{"location":"getting-started/bare-project/","text":"Bare Project This guide will lead you to install the project as a stand-alone web application, most of the configuration settings will be kept intact and, default web views will be used directly. 1. Creating a Laravel project. First you'll need a fresh installation of the Laravel framework by going through its official documentation here , or you can follow the following summarized steps. 1.a. Create project In terminal at your web root please run the following command: $ composer create-project laravel/laravel <your_project_name> --prefer-dist $ cd <your_project_name> Replacing <your_project_name> with project name of your preference. 1.b. Setting up the Database. Then you'll have to create the database for the project so, you'll need to login to your database server in terminal. $ mysql -u <username> -p Replacing <username> with your database server's username then, enter the password when prompted and, finally in the open mysql terminal you may write: create database <database_name>; exit; Replacing <database_name> with the name you'd like to give to your new database. Then in the .env file found in the root directory of your project, please set the values of all variables starting with DB_ accordingly. 2. Installing Web Call Center This project is created as a package to be integrated with a Laravel application, that's why we had to create fresh project first in the previous step. 2.a. Requiring the Package Now to install the project, in the terminal at your project's root directory, please write the following. $ composer require grey-dev-0/web-call-center:@dev 2.b. Publishing Assets Web call center supports customizations to its views and configurations thus, you should publish them to your project in case if you need to customize any of the views (UI) or configurations (settings). $ php artisan vendor:publish --force --provider='GreyZero\\WebCallCenter\\Providers\\AppServiceProvider' 2.c. Populating the Database Well we've created the database for our project, but we haven't started using it yet, so in the same terminal please write the following: $ php artisan queue:table $ php artisan migrate The last couple of commands have published Laravel's background queue jobs tables that will handle processing operations done in background and, it also creates the database tables required by the project to run in general. 3. Integrating Agora The package relies on Agora IO WebRTC services to implement the voice calls feature between customers and agents, the service provides a free plan that's a good starter for this project so, first you'll have to sign up to their service here or, if you already have an account you can directly use it. For detailed steps on how to setup Agora in our project please refer to Agora installation page .","title":"Bare Project"},{"location":"getting-started/bare-project/#bare-project","text":"This guide will lead you to install the project as a stand-alone web application, most of the configuration settings will be kept intact and, default web views will be used directly.","title":"Bare Project"},{"location":"getting-started/bare-project/#1-creating-a-laravel-project","text":"First you'll need a fresh installation of the Laravel framework by going through its official documentation here , or you can follow the following summarized steps.","title":"1. Creating a Laravel project."},{"location":"getting-started/bare-project/#1a-create-project","text":"In terminal at your web root please run the following command: $ composer create-project laravel/laravel <your_project_name> --prefer-dist $ cd <your_project_name> Replacing <your_project_name> with project name of your preference.","title":"1.a. Create project"},{"location":"getting-started/bare-project/#1b-setting-up-the-database","text":"Then you'll have to create the database for the project so, you'll need to login to your database server in terminal. $ mysql -u <username> -p Replacing <username> with your database server's username then, enter the password when prompted and, finally in the open mysql terminal you may write: create database <database_name>; exit; Replacing <database_name> with the name you'd like to give to your new database. Then in the .env file found in the root directory of your project, please set the values of all variables starting with DB_ accordingly.","title":"1.b. Setting up the Database."},{"location":"getting-started/bare-project/#2-installing-web-call-center","text":"This project is created as a package to be integrated with a Laravel application, that's why we had to create fresh project first in the previous step.","title":"2. Installing Web Call Center"},{"location":"getting-started/bare-project/#2a-requiring-the-package","text":"Now to install the project, in the terminal at your project's root directory, please write the following. $ composer require grey-dev-0/web-call-center:@dev","title":"2.a. Requiring the Package"},{"location":"getting-started/bare-project/#2b-publishing-assets","text":"Web call center supports customizations to its views and configurations thus, you should publish them to your project in case if you need to customize any of the views (UI) or configurations (settings). $ php artisan vendor:publish --force --provider='GreyZero\\WebCallCenter\\Providers\\AppServiceProvider'","title":"2.b. Publishing Assets"},{"location":"getting-started/bare-project/#2c-populating-the-database","text":"Well we've created the database for our project, but we haven't started using it yet, so in the same terminal please write the following: $ php artisan queue:table $ php artisan migrate The last couple of commands have published Laravel's background queue jobs tables that will handle processing operations done in background and, it also creates the database tables required by the project to run in general.","title":"2.c. Populating the Database"},{"location":"getting-started/bare-project/#3-integrating-agora","text":"The package relies on Agora IO WebRTC services to implement the voice calls feature between customers and agents, the service provides a free plan that's a good starter for this project so, first you'll have to sign up to their service here or, if you already have an account you can directly use it. For detailed steps on how to setup Agora in our project please refer to Agora installation page .","title":"3. Integrating Agora"},{"location":"getting-started/integrated-project/","text":"","title":"Integrated project"},{"location":"third-parties/agora/","text":"","title":"Agora"}]}