{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web Call Center for Laravel Overview This project aims to provide a web call center service where organizations and institutes that provide customer service and support can use, it's a WebRTC based project using Agora IO service to enable customers around the world contact your organization's customer support agents through web, it also supports receiving calls from Android and iOS applications that have Agora Mobile SDK integrated. This project can be used on its own within a bare Laravel application , or it can be integrated within existing Laravel applications , please refer to the \"Getting Started\" page that corresponds with your use case. IMPORTANT NOTICE: This project is still in early stages of development thus, it only provides basic features as of now, the list of available features is listed in the next section. Features Agents dashboard for customer support personnel to receive incoming calls. Customers prototype dashboard that enables them to make calls to one of the enlisted organizations. An organization can be any establishment that provides some kind of service or products to public e.g. hospitals, restaurants, agencies, or any other sort of business. Automatic management of incoming calls to a particular organization. On heavily incoming calls, the project will distribute them simply on all available agents i.e. an incoming call will always be assigned to the least occupied agent who's currently online within the organization requested by the calling customer. The dashboards included are customizable within any Laravel application whether used alone as a sole project, or integrated to an existing project. Integration to existing Laravel project can use your own existing models - database tables - that represent the required entities for the project to function. You'll need to have models that represent organizations, customer support agents and finally, customers. Or you can use the included models and database tables which are already defined within the project. Attribution The idea of this project wouldn't have come to life without the following amazing technologies and the great people behind their development: Laravel Laravel Websockets WebRTC by Google Agora IO Bootstrap Vue And the marvelous software that generated this documentation. MkDocs MkDocs Material","title":"Web Call Center for Laravel"},{"location":"#web-call-center-for-laravel","text":"","title":"Web Call Center for Laravel"},{"location":"#overview","text":"This project aims to provide a web call center service where organizations and institutes that provide customer service and support can use, it's a WebRTC based project using Agora IO service to enable customers around the world contact your organization's customer support agents through web, it also supports receiving calls from Android and iOS applications that have Agora Mobile SDK integrated. This project can be used on its own within a bare Laravel application , or it can be integrated within existing Laravel applications , please refer to the \"Getting Started\" page that corresponds with your use case. IMPORTANT NOTICE: This project is still in early stages of development thus, it only provides basic features as of now, the list of available features is listed in the next section.","title":"Overview"},{"location":"#features","text":"Agents dashboard for customer support personnel to receive incoming calls. Customers prototype dashboard that enables them to make calls to one of the enlisted organizations. An organization can be any establishment that provides some kind of service or products to public e.g. hospitals, restaurants, agencies, or any other sort of business. Automatic management of incoming calls to a particular organization. On heavily incoming calls, the project will distribute them simply on all available agents i.e. an incoming call will always be assigned to the least occupied agent who's currently online within the organization requested by the calling customer. The dashboards included are customizable within any Laravel application whether used alone as a sole project, or integrated to an existing project. Integration to existing Laravel project can use your own existing models - database tables - that represent the required entities for the project to function. You'll need to have models that represent organizations, customer support agents and finally, customers. Or you can use the included models and database tables which are already defined within the project.","title":"Features"},{"location":"#attribution","text":"The idea of this project wouldn't have come to life without the following amazing technologies and the great people behind their development: Laravel Laravel Websockets WebRTC by Google Agora IO Bootstrap Vue And the marvelous software that generated this documentation. MkDocs MkDocs Material","title":"Attribution"},{"location":"getting-started/bare-project/","text":"Bare Project This guide will lead you to install the project as a stand-alone web application, most of the configuration settings will be kept intact and, default web views will be used directly. 1. Creating a Laravel project. First you'll need a fresh installation of the Laravel framework by going through its official documentation here , or you can follow the following summarized steps. 1.a. Create project In terminal at your web root please run the following command: $ composer create-project laravel/laravel <your_project_name> --prefer-dist $ cd <your_project_name> Replacing <your_project_name> with project name of your preference. 1.b. Setting up the Database. Then you'll have to create the database for the project so, you'll need to login to your database server in terminal. $ mysql -u <username> -p Replacing <username> with your database server's username then, enter the password when prompted and, finally in the open mysql terminal you may write: create database <database_name>; exit; Replacing <database_name> with the name you'd like to give to your new database. Then in the .env file found in the root directory of your project, please set the values of all variables starting with DB_ accordingly. 2. Installing Web Call Center This project is created as a package to be integrated with a Laravel application, that's why we had to create fresh project first in the previous step. 2.a. Requiring the Package Now to install the project, in the terminal at your project's root directory, please write the following. $ composer require grey-dev-0/web-call-center:@dev 2.b. Publishing Assets Web call center supports customizations to its views and configurations thus, you should publish them to your project in case if you need to customize any of the views (UI) or configurations (settings). $ php artisan vendor:publish --force --provider='GreyZero\\WebCallCenter\\Providers\\AppServiceProvider' 2.c. Populating the Database Well we've created the database for our project, but we haven't started using it yet, so in the same terminal please write the following: $ php artisan queue:table $ php artisan migrate The last couple of commands have published Laravel's background queue jobs tables that will handle processing operations done in background and, it also creates the database tables required by the project to run in general. 3. Integrating Agora The package relies on Agora IO WebRTC services to implement the voice calls feature between customers and agents, the service provides a free plan that's a good starter for this project so, first you'll have to sign up to their service here or, if you already have an account you can directly use it. For detailed steps on how to setup Agora in our project please refer to Agora installation page . 4. Integrating Laravel Websockets Laravel Websockets is a library used internally by this project that enables the server to monitor which customer support agents are currently online within each organization, so that incoming calls can only be assigned to online agents. To set it up please refer to Laravel Websockets installation page . 5. Web Server Configuration At this point our project is running in background but, most likely it's not serving anyone because, we haven't covered the web server configuration for our project so, let's finalize our setup with this last step. Nginx Apache If you don't have nginx configuration file for the project yet, please create one in /etc/nginx/conf.d directory, filename doesn't matter much as long as it ends with .conf extension, in that file whether you've just created it or you're editing an existing one please ensure it matches the following, replacing all <placeholder> values with your corresponding values: server { listen 80; # Disable this on Production server for security listen [::]:80; # Disable this too on Production listen 443 ssl; listen [::]:443 ssl; server_name <your_domain>; ssl_certificate /etc/nginx/ssl/certificate.pem; ssl_certificate_key /etc/nginx/ssl/key.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_session_tickets off; ssl_stapling off; ssl_stapling_verify off; index index.php; root <aboslute_path_to_project>/public; location / { try_files $uri $uri/ /index.php$is_args$args; } location /app/<app_key_in_env_file> { proxy_pass http://127.0.0.1:6001; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade \"websocket\"; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 30000s; proxy_send_timeout 30000s; proxy_redirect off; proxy_connect_timeout 30000s; } # Replace this with your php-fpm configuration block or correct configuration file. include common/php-fpm.conf; location ~ \\.env$ { deny all; } } PS: If you have changed the default websocket port with LARAVEL_WEBSOCKETS_PORT variable in the .env file, please replace the port 6001 in the nginx configuration above with the one you specified in the .env file accordingly. IMPORTANT: After saving the file you'll need to run the following command in terminal to use the new configuration. $ nginx -s reload You'll need to add the following VirtualHost block to your default Apache configuration or, edit the one that corresponds with your server's domain name if you're on a server, replacing all <placeholder> values with your corresponding values, the file can be created or edited if exists in /etc/httpd/conf.d directory: <VirtualHost *:80> # Remove this block on Production server for security. ServerName <your_domain_name> DocumentRoot <aboslute_path_to_project>/public <Location \"/app/<app_key_in_env_file>\"> ProxyRequests on RequestHeader set X-Forwarded-Proto \"http\" ProxyPass / https://127.0.0.1:6001/ ProxyPassReverse / https://127.0.0.1:6001/ RewriteEngine on RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC] RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC] RewriteRule .* ws://127.0.0.1:6001%{REQUEST_URI} [P] </Location> </VirtualHost> <VirtualHost *:443> ServerName <your_domain_name> DocumentRoot <aboslute_path_to_project>/public SSLEngine on SSLCertificateFile /etc/apache2/ssl/certificate.pem SSLCertificateKeyFile /etc/apache2/ssl/key.pem <Location \"/app/<app_key_in_env_file>\"> ProxyRequests on RequestHeader set X-Forwarded-Proto \"http\" ProxyPass / https://127.0.0.1:6001/ ProxyPassReverse / https://127.0.0.1:6001/ RewriteEngine on RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC] RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC] RewriteRule .* ws://127.0.0.1:6001%{REQUEST_URI} [P] </Location> </VirtualHost> PS: If you have changed the default websocket port with LARAVEL_WEBSOCKETS_PORT variable in the .env file, please replace the port 6001 in the apache configuration above with the one you specified in the .env file accordingly. IMPORTANT: After saving the file you'll need to run the following command in terminal to use the new configuration. $ systemctl restart httpd If that didn't work due to a command not found error, you can write: $ service httpd restart","title":"Bare Project"},{"location":"getting-started/bare-project/#bare-project","text":"This guide will lead you to install the project as a stand-alone web application, most of the configuration settings will be kept intact and, default web views will be used directly.","title":"Bare Project"},{"location":"getting-started/bare-project/#1-creating-a-laravel-project","text":"First you'll need a fresh installation of the Laravel framework by going through its official documentation here , or you can follow the following summarized steps.","title":"1. Creating a Laravel project."},{"location":"getting-started/bare-project/#1a-create-project","text":"In terminal at your web root please run the following command: $ composer create-project laravel/laravel <your_project_name> --prefer-dist $ cd <your_project_name> Replacing <your_project_name> with project name of your preference.","title":"1.a. Create project"},{"location":"getting-started/bare-project/#1b-setting-up-the-database","text":"Then you'll have to create the database for the project so, you'll need to login to your database server in terminal. $ mysql -u <username> -p Replacing <username> with your database server's username then, enter the password when prompted and, finally in the open mysql terminal you may write: create database <database_name>; exit; Replacing <database_name> with the name you'd like to give to your new database. Then in the .env file found in the root directory of your project, please set the values of all variables starting with DB_ accordingly.","title":"1.b. Setting up the Database."},{"location":"getting-started/bare-project/#2-installing-web-call-center","text":"This project is created as a package to be integrated with a Laravel application, that's why we had to create fresh project first in the previous step.","title":"2. Installing Web Call Center"},{"location":"getting-started/bare-project/#2a-requiring-the-package","text":"Now to install the project, in the terminal at your project's root directory, please write the following. $ composer require grey-dev-0/web-call-center:@dev","title":"2.a. Requiring the Package"},{"location":"getting-started/bare-project/#2b-publishing-assets","text":"Web call center supports customizations to its views and configurations thus, you should publish them to your project in case if you need to customize any of the views (UI) or configurations (settings). $ php artisan vendor:publish --force --provider='GreyZero\\WebCallCenter\\Providers\\AppServiceProvider'","title":"2.b. Publishing Assets"},{"location":"getting-started/bare-project/#2c-populating-the-database","text":"Well we've created the database for our project, but we haven't started using it yet, so in the same terminal please write the following: $ php artisan queue:table $ php artisan migrate The last couple of commands have published Laravel's background queue jobs tables that will handle processing operations done in background and, it also creates the database tables required by the project to run in general.","title":"2.c. Populating the Database"},{"location":"getting-started/bare-project/#3-integrating-agora","text":"The package relies on Agora IO WebRTC services to implement the voice calls feature between customers and agents, the service provides a free plan that's a good starter for this project so, first you'll have to sign up to their service here or, if you already have an account you can directly use it. For detailed steps on how to setup Agora in our project please refer to Agora installation page .","title":"3. Integrating Agora"},{"location":"getting-started/bare-project/#4-integrating-laravel-websockets","text":"Laravel Websockets is a library used internally by this project that enables the server to monitor which customer support agents are currently online within each organization, so that incoming calls can only be assigned to online agents. To set it up please refer to Laravel Websockets installation page .","title":"4. Integrating Laravel Websockets"},{"location":"getting-started/bare-project/#5-web-server-configuration","text":"At this point our project is running in background but, most likely it's not serving anyone because, we haven't covered the web server configuration for our project so, let's finalize our setup with this last step. Nginx Apache If you don't have nginx configuration file for the project yet, please create one in /etc/nginx/conf.d directory, filename doesn't matter much as long as it ends with .conf extension, in that file whether you've just created it or you're editing an existing one please ensure it matches the following, replacing all <placeholder> values with your corresponding values: server { listen 80; # Disable this on Production server for security listen [::]:80; # Disable this too on Production listen 443 ssl; listen [::]:443 ssl; server_name <your_domain>; ssl_certificate /etc/nginx/ssl/certificate.pem; ssl_certificate_key /etc/nginx/ssl/key.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_session_tickets off; ssl_stapling off; ssl_stapling_verify off; index index.php; root <aboslute_path_to_project>/public; location / { try_files $uri $uri/ /index.php$is_args$args; } location /app/<app_key_in_env_file> { proxy_pass http://127.0.0.1:6001; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade \"websocket\"; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 30000s; proxy_send_timeout 30000s; proxy_redirect off; proxy_connect_timeout 30000s; } # Replace this with your php-fpm configuration block or correct configuration file. include common/php-fpm.conf; location ~ \\.env$ { deny all; } } PS: If you have changed the default websocket port with LARAVEL_WEBSOCKETS_PORT variable in the .env file, please replace the port 6001 in the nginx configuration above with the one you specified in the .env file accordingly. IMPORTANT: After saving the file you'll need to run the following command in terminal to use the new configuration. $ nginx -s reload You'll need to add the following VirtualHost block to your default Apache configuration or, edit the one that corresponds with your server's domain name if you're on a server, replacing all <placeholder> values with your corresponding values, the file can be created or edited if exists in /etc/httpd/conf.d directory: <VirtualHost *:80> # Remove this block on Production server for security. ServerName <your_domain_name> DocumentRoot <aboslute_path_to_project>/public <Location \"/app/<app_key_in_env_file>\"> ProxyRequests on RequestHeader set X-Forwarded-Proto \"http\" ProxyPass / https://127.0.0.1:6001/ ProxyPassReverse / https://127.0.0.1:6001/ RewriteEngine on RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC] RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC] RewriteRule .* ws://127.0.0.1:6001%{REQUEST_URI} [P] </Location> </VirtualHost> <VirtualHost *:443> ServerName <your_domain_name> DocumentRoot <aboslute_path_to_project>/public SSLEngine on SSLCertificateFile /etc/apache2/ssl/certificate.pem SSLCertificateKeyFile /etc/apache2/ssl/key.pem <Location \"/app/<app_key_in_env_file>\"> ProxyRequests on RequestHeader set X-Forwarded-Proto \"http\" ProxyPass / https://127.0.0.1:6001/ ProxyPassReverse / https://127.0.0.1:6001/ RewriteEngine on RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC] RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC] RewriteRule .* ws://127.0.0.1:6001%{REQUEST_URI} [P] </Location> </VirtualHost> PS: If you have changed the default websocket port with LARAVEL_WEBSOCKETS_PORT variable in the .env file, please replace the port 6001 in the apache configuration above with the one you specified in the .env file accordingly. IMPORTANT: After saving the file you'll need to run the following command in terminal to use the new configuration. $ systemctl restart httpd If that didn't work due to a command not found error, you can write: $ service httpd restart","title":"5. Web Server Configuration"},{"location":"getting-started/integrated-project/","text":"","title":"Integrated project"},{"location":"third-parties/agora/","text":"Agora Overview Agora is a WebRTC service that provides Video / Voice / Text chat implementation that can be integrated and added to any application, it's used by this project to enable customers to contact customer support / service agents on web voice calls, which can be initiated from a web browser or a mobile application that uses Agora SDK. Enabling Agora Integration To start using this project it's required that you use your Agora account's integration credentials so, to achieve this please follow the upcoming steps: Signup on Agora here , it's free and, no credit / debit card entry required. Create your first Agora project on their dashboard by following their on-boarding wizard. In Agora's main dashboard page, click the \"Config\" button found within your project's section. Click the copy icon in the \"App ID\" field then paste it to the end of your Laravel project's .env file with the key AGORA_APP_ID so, the line added is AGORA_APP_ID=<your_app_id> replacing <your_app_id> with the code you've copied. Click the copy icon in the \"App Certificate\" field then paste it to the end of the .env file like the previous one but with the key AGORA_CERTIFICATE . Continue the Setup. That's it, you've successfully integrated Agora service to the project, you'll need to follow the remaining steps to finalize the setup of the project so you can now: Continue Bare Project setup . Continue Integrated Project setup .","title":"Agora"},{"location":"third-parties/agora/#agora","text":"","title":"Agora"},{"location":"third-parties/agora/#overview","text":"Agora is a WebRTC service that provides Video / Voice / Text chat implementation that can be integrated and added to any application, it's used by this project to enable customers to contact customer support / service agents on web voice calls, which can be initiated from a web browser or a mobile application that uses Agora SDK.","title":"Overview"},{"location":"third-parties/agora/#enabling-agora-integration","text":"To start using this project it's required that you use your Agora account's integration credentials so, to achieve this please follow the upcoming steps: Signup on Agora here , it's free and, no credit / debit card entry required. Create your first Agora project on their dashboard by following their on-boarding wizard. In Agora's main dashboard page, click the \"Config\" button found within your project's section. Click the copy icon in the \"App ID\" field then paste it to the end of your Laravel project's .env file with the key AGORA_APP_ID so, the line added is AGORA_APP_ID=<your_app_id> replacing <your_app_id> with the code you've copied. Click the copy icon in the \"App Certificate\" field then paste it to the end of the .env file like the previous one but with the key AGORA_CERTIFICATE .","title":"Enabling Agora Integration"},{"location":"third-parties/agora/#continue-the-setup","text":"That's it, you've successfully integrated Agora service to the project, you'll need to follow the remaining steps to finalize the setup of the project so you can now: Continue Bare Project setup . Continue Integrated Project setup .","title":"Continue the Setup."},{"location":"third-parties/websocket/","text":"Laravel Websockets Overview In order for this project to properly manage and assign incoming calls to online least occupied customer agents, it utilizes Laravel Websockets library to enable the server realtime communication with customer agents, thus recognizing which agents are online within each organization besides, notifying them about their assigned calls once they come in. Laravel Websockets Integration 1. Setting Required .env variables. Please set ensure the existence and setting of the following environment variables in your project's .env file. PUSHER_APP_ID=<app_id> PUSHER_APP_KEY=<app_key> PUSHER_APP_SECRET=<app_secret> PUSHER_APP_CLUSTER=<app_cluster> Replacing all values with any string of your preference however, special characters should be avoided to prevent any potential errors or malfunctions. 2. Setting up Broadcasting configuration In your project's config/broadcasting.php file, please replace the pusher entry with following block: 'pusher' => [ 'driver' => 'pusher', 'key' => env('PUSHER_APP_KEY'), 'secret' => env('PUSHER_APP_SECRET'), 'app_id' => env('PUSHER_APP_ID'), 'options' => [ 'cluster' => env('PUSHER_APP_CLUSTER'), 'encrypted' => true, 'host' => '127.0.0.1', 'port' => env('LARAVEL_WEBSOCKETS_PORT', 6001), 'scheme' => 'http' ], ] This configuration is necessary to enable handled HTTP requests query the websocket server about current customer agents status when required. 3. Starting up Required Background Services For Laravel Websockets and Notifications System to function a couple of background services must be launched on the server hosting this project or, on your pc if your trying this project locally. First make sure that the QUEUE_CONNECTION key in your project's .env file is set to database or any value other than sync if you're not using the database for handling Laravel's background jobs, then in terminal at your project's directory please write the following: $ nohup php artisan queue:work > storage/logs/queues.log & $ nohup php artisan websockets:serve > storage/logs/websocket.log & These couple of lines will run the required services mentioned and log their output to the files specified after the > operator so, in case of problems you can always check those files for debugging. nohup command is used here to ensure that the services keep running even after you close the terminal so, these services will keep running until you either restart the server - or pc - or, an error occurs in one of them. Continue the Setup. That's it, you've successfully setup Laravel Websockets for the project, you'll need to follow the remaining steps to finalize the setup of the project so you can now: Continue Bare Project setup . Continue Integrated Project setup .","title":"Laravel Websockets"},{"location":"third-parties/websocket/#laravel-websockets","text":"","title":"Laravel Websockets"},{"location":"third-parties/websocket/#overview","text":"In order for this project to properly manage and assign incoming calls to online least occupied customer agents, it utilizes Laravel Websockets library to enable the server realtime communication with customer agents, thus recognizing which agents are online within each organization besides, notifying them about their assigned calls once they come in.","title":"Overview"},{"location":"third-parties/websocket/#laravel-websockets-integration","text":"","title":"Laravel Websockets Integration"},{"location":"third-parties/websocket/#1-setting-required-env-variables","text":"Please set ensure the existence and setting of the following environment variables in your project's .env file. PUSHER_APP_ID=<app_id> PUSHER_APP_KEY=<app_key> PUSHER_APP_SECRET=<app_secret> PUSHER_APP_CLUSTER=<app_cluster> Replacing all values with any string of your preference however, special characters should be avoided to prevent any potential errors or malfunctions.","title":"1. Setting Required .env variables."},{"location":"third-parties/websocket/#2-setting-up-broadcasting-configuration","text":"In your project's config/broadcasting.php file, please replace the pusher entry with following block: 'pusher' => [ 'driver' => 'pusher', 'key' => env('PUSHER_APP_KEY'), 'secret' => env('PUSHER_APP_SECRET'), 'app_id' => env('PUSHER_APP_ID'), 'options' => [ 'cluster' => env('PUSHER_APP_CLUSTER'), 'encrypted' => true, 'host' => '127.0.0.1', 'port' => env('LARAVEL_WEBSOCKETS_PORT', 6001), 'scheme' => 'http' ], ] This configuration is necessary to enable handled HTTP requests query the websocket server about current customer agents status when required.","title":"2. Setting up Broadcasting configuration"},{"location":"third-parties/websocket/#3-starting-up-required-background-services","text":"For Laravel Websockets and Notifications System to function a couple of background services must be launched on the server hosting this project or, on your pc if your trying this project locally. First make sure that the QUEUE_CONNECTION key in your project's .env file is set to database or any value other than sync if you're not using the database for handling Laravel's background jobs, then in terminal at your project's directory please write the following: $ nohup php artisan queue:work > storage/logs/queues.log & $ nohup php artisan websockets:serve > storage/logs/websocket.log & These couple of lines will run the required services mentioned and log their output to the files specified after the > operator so, in case of problems you can always check those files for debugging. nohup command is used here to ensure that the services keep running even after you close the terminal so, these services will keep running until you either restart the server - or pc - or, an error occurs in one of them.","title":"3. Starting up Required Background Services"},{"location":"third-parties/websocket/#continue-the-setup","text":"That's it, you've successfully setup Laravel Websockets for the project, you'll need to follow the remaining steps to finalize the setup of the project so you can now: Continue Bare Project setup . Continue Integrated Project setup .","title":"Continue the Setup."}]}